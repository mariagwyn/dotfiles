#!/usr/bin/env bash

# shortcut to this dotfiles path is $DOTS
export DOTS=$HOME/.dotfiles

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# Load path files
for file in $(find -H "$DOTS" -maxdepth 2 -name '*path.sh')
do
  source $file
done
echo -e "\nPaths loaded.\n"

# Source the bash folder first b/c it helps.  A lot.
for file in $(find "$DOTS/bash" -type f ! -name *completion* ! -name *path* ! -name *install* -name '*.sh')
do
  source $file
done
echo -e "Sourced bash files first!\n"

# Load everything but the path, completion, os-defaults and install files.
for file in $(find "$DOTS" -type f ! -name *completion* ! -name *path* ! -name *install* -name '*.sh' ! -name set-defaults.sh)
do
  source $file
done
echo -e "Remaining config files sourced.\n"

# Load completion files
for file in $(find -H "$DOTS" -name 'completion.sh')
do
  source $file
done
echo -e "Completed.\n"


# include AH profile
if [ -f ~/.ah_profile ]; then
  . ~/.ah_profile
fi

if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

export PATH="$PATH:/Application/DevDesktop/tools"
function blt() {
  if [[ ! -z ${AH_SITE_ENVIRONMENT} ]]; then
    PROJECT_ROOT="/var/www/html/${AH_SITE_GROUP}.${AH_SITE_ENVIRONMENT}"
  elif [ "`git rev-parse --show-cdup 2> /dev/null`" != "" ]; then
    PROJECT_ROOT=$(git rev-parse --show-cdup)
  else
    PROJECT_ROOT="."
  fi

  if [ -f "$PROJECT_ROOT/vendor/bin/blt" ]; then
    $PROJECT_ROOT/vendor/bin/blt "$@"

  # Check for local BLT.
  elif [ -f "./vendor/bin/blt" ]; then
    ./vendor/bin/blt "$@"

  else
    echo "You must run this command from within a BLT-generated project."
    return 1
  fi
}
